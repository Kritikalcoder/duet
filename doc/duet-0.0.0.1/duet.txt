-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package duet
@version 0.0.0.1

module Duet.Quantity
data Quantity a
Zero :: Quantity a
Quantity :: a -> Quantity a
Inf :: Quantity a
truncate :: Quantity a -> Quantity b -> Quantity b
class (forall a. Append a => Append (p a)) => Privacy p
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (Duet.Quantity.Quantity a)
instance UVMHS.Core.Classes.Monoid.Null (Duet.Quantity.Quantity a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (Duet.Quantity.Quantity a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Monoid (Duet.Quantity.Quantity a)
instance UVMHS.Core.Classes.Functor.Functor Duet.Quantity.Quantity
instance GHC.Show.Show a => GHC.Show.Show (Duet.Quantity.Quantity a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Duet.Quantity.Quantity a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Duet.Quantity.Quantity a)

module Duet.Var
data 𝕏
𝕏 :: 𝕊 -> 𝑂 ℕ -> 𝕏
[𝕩name] :: 𝕏 -> 𝕊
[𝕩Gen] :: 𝕏 -> 𝑂 ℕ
𝕩GenL :: (⟢) 𝕏 (𝑂 ℕ)
𝕩nameL :: (⟢) 𝕏 𝕊
var :: 𝕊 -> 𝕏
instance (UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.𝕊, UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝑂 UVMHS.Init.ℕ)) => UVMHS.Lib.Pretty.Class.Pretty Duet.Var.𝕏
instance GHC.Show.Show Duet.Var.𝕏
instance GHC.Classes.Ord Duet.Var.𝕏
instance GHC.Classes.Eq Duet.Var.𝕏

module Duet.RExp
cart' :: 𝐿 a -> 𝐿 (𝐿 a) -> 𝐿 (𝐿 a)
cart :: 𝐿 (𝐿 a) -> 𝐿 (𝐿 a)
parens :: 𝕊 -> 𝕊
parenSwitch :: ℕ -> 𝕊 -> 𝕊
type RExp = Annotated FullContext RExpPre
data RExpPre
VarRE :: 𝕏 -> RExpPre
NatRE :: ℕ -> RExpPre
NNRealRE :: 𝔻 -> RExpPre
MaxRE :: RExp -> RExp -> RExpPre
MinRE :: RExp -> RExp -> RExpPre
PlusRE :: RExp -> RExp -> RExpPre
TimesRE :: RExp -> RExp -> RExpPre
DivRE :: RExp -> RExp -> RExpPre
RootRE :: RExp -> RExpPre
LogRE :: RExp -> RExpPre
prettyRExp :: RExpPre -> 𝕊
interpRExp :: (𝕏 ⇰ 𝔻) -> RExpPre -> 𝔻
data RNF
NatRNF :: ℕ -> RNF
NNRealRNF :: 𝔻 -> RNF
SymRNF :: 𝑃 (𝑃 RSP) -> RNF
newtype RSP
RSP :: ((RAtom ⇰ ℕ) ⇰ ℕ) -> RSP
[unRSP] :: RSP -> (RAtom ⇰ ℕ) ⇰ ℕ
data RAtom
VarRA :: 𝕏 -> RAtom
NNRealRA :: 𝔻 -> RAtom
InvRA :: RSP -> RAtom
RootRA :: RSP -> RAtom
LogRA :: RSP -> RAtom
prettyRAtom :: RAtom -> 𝕊
prettyRSP :: RSP -> 𝕊
prettyRNF :: RNF -> 𝕊
interpRAtom :: (𝕏 ⇰ 𝔻) -> RAtom -> 𝔻
interpRSP :: (𝕏 ⇰ 𝔻) -> RSP -> 𝔻
interpRNF :: (𝕏 ⇰ 𝔻) -> RNF -> 𝔻
natSymRNF :: ℕ -> 𝑃 (𝑃 RSP)
realSymRNF :: 𝔻 -> 𝑃 (𝑃 RSP)
binopRNF :: 𝑃 RNF -> 𝑃 RNF -> (ℕ -> ℕ -> ℕ ∨ 𝔻) -> (𝔻 -> 𝔻 -> 𝔻) -> (𝑃 (𝑃 RSP) -> 𝑃 (𝑃 RSP) -> 𝑃 (𝑃 RSP)) -> RNF -> RNF -> RNF
varRNF :: 𝕏 -> RNF
maxRNF :: RNF -> RNF -> RNF
minRNF :: RNF -> RNF -> RNF
plusRNF :: RNF -> RNF -> RNF
timesRNF :: RNF -> RNF -> RNF
expRNF :: RNF -> ℕ -> RNF
invRNF :: RNF -> RNF
rootRNF :: RNF -> RNF
logRNF :: RNF -> RNF
normalizeRExp :: RExpPre -> RNF
instance (UVMHS.Lib.Pretty.Class.Pretty Duet.Var.𝕏, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.𝔻, UVMHS.Lib.Pretty.Class.Pretty Duet.RExp.RSP) => UVMHS.Lib.Pretty.Class.Pretty Duet.RExp.RAtom
instance UVMHS.Core.Classes.Lattice.Bot Duet.RExp.RNF
instance UVMHS.Core.Classes.Lattice.Join Duet.RExp.RNF
instance UVMHS.Core.Classes.Lattice.JoinLattice Duet.RExp.RNF
instance UVMHS.Core.Classes.Lattice.Meet Duet.RExp.RNF
instance UVMHS.Core.Classes.Arithmetic.Additive Duet.RExp.RNF
instance UVMHS.Core.Classes.Arithmetic.Multiplicative Duet.RExp.RNF
instance UVMHS.Core.Classes.Arithmetic.Divisible Duet.RExp.RNF
instance UVMHS.Core.Classes.Monoid.Null Duet.RExp.RNF
instance UVMHS.Core.Classes.Monoid.Append Duet.RExp.RNF
instance UVMHS.Core.Classes.Monoid.Monoid Duet.RExp.RNF
instance UVMHS.Core.Classes.Lattice.POrd Duet.RExp.RNF
instance UVMHS.Lib.Pretty.Class.Pretty ((Duet.RExp.RAtom UVMHS.Init.⇰ UVMHS.Init.ℕ) UVMHS.Init.⇰ UVMHS.Init.ℕ) => UVMHS.Lib.Pretty.Class.Pretty Duet.RExp.RSP
instance (UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.ℕ, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.𝔻, UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝑃 (UVMHS.Init.𝑃 Duet.RExp.RSP))) => UVMHS.Lib.Pretty.Class.Pretty Duet.RExp.RNF
instance GHC.Show.Show Duet.RExp.RNF
instance GHC.Classes.Ord Duet.RExp.RNF
instance GHC.Classes.Eq Duet.RExp.RNF
instance GHC.Show.Show Duet.RExp.RSP
instance GHC.Classes.Ord Duet.RExp.RSP
instance GHC.Classes.Eq Duet.RExp.RSP
instance GHC.Show.Show Duet.RExp.RAtom
instance GHC.Classes.Ord Duet.RExp.RAtom
instance GHC.Classes.Eq Duet.RExp.RAtom
instance (UVMHS.Lib.Pretty.Class.Pretty Duet.Var.𝕏, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.ℕ, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.𝔻, UVMHS.Lib.Pretty.Class.Pretty Duet.RExp.RExp) => UVMHS.Lib.Pretty.Class.Pretty Duet.RExp.RExpPre
instance GHC.Classes.Ord Duet.RExp.RExpPre
instance GHC.Classes.Eq Duet.RExp.RExpPre

module Duet.Syntax
type Kind = Annotated FullContext KindPre
data KindPre
ℕK :: KindPre
ℝK :: KindPre
data Norm
L1 :: Norm
L2 :: Norm
LInf :: Norm
data Clip
NormClip :: Norm -> Clip
UClip :: Clip
newtype Sens e
Sens :: Quantity e -> Sens e
[unSens] :: Sens e -> Quantity e
newtype Priv p e
Priv :: Quantity (p e) -> Priv p e
[unPriv] :: Priv p e -> Quantity (p e)
type Type p e = Annotated FullContext (TypePre p e)
data TypePre p e
ℕˢT :: e -> TypePre p e
ℝˢT :: e -> TypePre p e
ℕT :: TypePre p e
ℝT :: TypePre p e
𝔻T :: TypePre p e
𝕀T :: e -> TypePre p e
𝕄T :: Norm -> Clip -> e -> e -> Type p e -> TypePre p e
(:+:) :: Type p e -> Type p e -> TypePre p e
(:×:) :: Type p e -> Type p e -> TypePre p e
(:&:) :: Type p e -> Type p e -> TypePre p e
(:⊸:) :: Type p e -> (Sens e ∧ Type p e) -> TypePre p e
(:⊸⋆:) :: (𝐿 (𝕏 ∧ Kind) ∧ 𝐿 (Type p e ∧ Priv p e)) -> Type p e -> TypePre p e
data Grad
LR :: Grad
type SExp p = Annotated FullContext (SExpPre p)
data SExpPre p
ℕˢSE :: ℕ -> SExpPre p
ℝˢSE :: 𝔻 -> SExpPre p
DynSE :: SExp p -> SExpPre p
ℕSE :: ℕ -> SExpPre p
ℝSE :: 𝔻 -> SExpPre p
RealSE :: SExp p -> SExpPre p
MaxSE :: SExp p -> SExp p -> SExpPre p
MinSE :: SExp p -> SExp p -> SExpPre p
PlusSE :: SExp p -> SExp p -> SExpPre p
TimesSE :: SExp p -> SExp p -> SExpPre p
DivSE :: SExp p -> SExp p -> SExpPre p
RootSE :: SExp p -> SExpPre p
LogSE :: SExp p -> SExpPre p
ModSE :: SExp p -> SExp p -> SExpPre p
MinusSE :: SExp p -> SExp p -> SExpPre p
MCreateSE :: Norm -> SExp p -> SExp p -> 𝕏 -> 𝕏 -> SExp p -> SExpPre p
MIndexSE :: SExp p -> SExp p -> SExp p -> SExpPre p
MUpdateSE :: SExp p -> SExp p -> SExp p -> SExp p -> SExpPre p
MRowsSE :: SExp p -> SExpPre p
MColsSE :: SExp p -> SExpPre p
MClipSE :: Norm -> SExp p -> SExpPre p
MConvertSE :: SExp p -> SExpPre p
MLipGradSE :: Grad -> Norm -> SExp p -> SExp p -> SExp p -> SExpPre p
MUnbGradSE :: Grad -> SExp p -> SExp p -> SExp p -> SExpPre p
MMapSE :: SExp p -> 𝕏 -> SExp p -> SExpPre p
MMap2SE :: SExp p -> SExp p -> 𝕏 -> 𝕏 -> SExp p -> SExpPre p
MMapRowSE :: SExp p -> 𝕏 -> SExp p -> SExpPre p
MMapRow2SE :: SExp p -> 𝕏 -> SExp p -> SExpPre p
MFoldRowSE :: SExp p -> SExp p -> 𝕏 -> 𝕏 -> SExp p -> SExpPre p
IfSE :: SExp p -> SExp p -> SExp p -> SExpPre p
SLoopSE :: SExp p -> SExp p -> 𝕏 -> SExp p -> SExpPre p
LoopSE :: SExp p -> SExp p -> 𝕏 -> SExp p -> SExpPre p
VarSE :: 𝕏 -> SExpPre p
LetSE :: 𝕏 -> SExp p -> SExp p -> SExpPre p
SFunSE :: 𝕏 -> Type p RExp -> SExp p -> SExpPre p
AppSE :: SExp p -> SExp p -> SExpPre p
PFunSE :: 𝐿 (𝕏 ∧ Kind) -> 𝐿 (𝕏 ∧ Type p RExp) -> PExp p -> SExpPre p
InlSE :: Type p RExp -> SExp p -> SExpPre p
InrSE :: Type p RExp -> SExp p -> SExpPre p
CaseSE :: SExp p -> 𝕏 -> SExp p -> 𝕏 -> SExp p -> SExpPre p
TupSE :: SExp p -> SExp p -> SExpPre p
UntupSE :: 𝕏 -> 𝕏 -> SExp p -> SExp p -> SExpPre p
PairSE :: SExp p -> SExp p -> SExpPre p
FstSE :: SExp p -> SExpPre p
SndSE :: SExp p -> SExpPre p
type PExp p = Annotated FullContext (PExpPre p)
data PExpPre p
ReturnPE :: SExp p -> PExpPre p
BindPE :: 𝕏 -> PExp p -> PExp p -> PExpPre p
AppPE :: 𝐿 RExp -> SExp p -> 𝐿 𝕏 -> PExpPre p
LoopPE :: SExp p -> SExp p -> SExp p -> 𝐿 𝕏 -> 𝕏 -> 𝕏 -> PExp p -> PExpPre p
GaussPE :: SExp p -> SExp p -> SExp p -> 𝐿 𝕏 -> SExp p -> PExpPre p
MGaussPE :: SExp p -> SExp p -> SExp p -> 𝐿 𝕏 -> SExp p -> PExpPre p
PLaplaceE :: SExp p -> SExp p -> 𝐿 𝕏 -> SExp p -> PExpPre p
PExponentialE :: SExp p -> SExp p -> SExp p -> 𝕏 -> SExp p -> PExpPre p
PRRespE :: SExp p -> SExp p -> 𝐿 𝕏 -> SExp p -> PExpPre p
PSampleE :: SExp p -> 𝕏 -> 𝕏 -> 𝕏 -> 𝕏 -> PExp p -> PExpPre p
PRandNatE :: SExp p -> SExp p -> PExpPre p
instance (UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.SExp p), UVMHS.Lib.Pretty.Class.Pretty Duet.Var.𝕏, UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.PExp p), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝐿 Duet.RExp.RExp), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝐿 Duet.Var.𝕏)) => UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.PExpPre p)
instance (UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.ℕ, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.𝔻, UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.SExp p), UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Norm, UVMHS.Lib.Pretty.Class.Pretty Duet.Var.𝕏, UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Grad, UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.Type p Duet.RExp.RExp), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝐿 (Duet.Var.𝕏 UVMHS.Init.∧ Duet.Syntax.Kind)), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝐿 (Duet.Var.𝕏 UVMHS.Init.∧ Duet.Syntax.Type p Duet.RExp.RExp)), UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.PExp p)) => UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.SExpPre p)
instance (forall a. GHC.Classes.Eq a => GHC.Classes.Eq (p a)) => GHC.Classes.Eq (Duet.Syntax.SExpPre p)
instance (forall a. GHC.Classes.Eq a => GHC.Classes.Eq (p a), forall a. GHC.Classes.Ord a => GHC.Classes.Ord (p a)) => GHC.Classes.Ord (Duet.Syntax.SExpPre p)
instance (forall a. GHC.Classes.Eq a => GHC.Classes.Eq (p a)) => GHC.Classes.Eq (Duet.Syntax.PExpPre p)
instance (forall a. GHC.Classes.Eq a => GHC.Classes.Eq (p a), forall a. GHC.Classes.Ord a => GHC.Classes.Ord (p a)) => GHC.Classes.Ord (Duet.Syntax.PExpPre p)
instance UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Grad
instance GHC.Show.Show Duet.Syntax.Grad
instance GHC.Classes.Ord Duet.Syntax.Grad
instance GHC.Classes.Eq Duet.Syntax.Grad
instance (UVMHS.Lib.Pretty.Class.Pretty e, UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Norm, UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Clip, UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.Type p e), UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.Sens e UVMHS.Init.∧ Duet.Syntax.Type p e), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝐿 (Duet.Var.𝕏 UVMHS.Init.∧ Duet.Syntax.Kind) UVMHS.Init.∧ UVMHS.Init.𝐿 (Duet.Syntax.Type p e UVMHS.Init.∧ Duet.Syntax.Priv p e))) => UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.TypePre p e)
instance UVMHS.Core.Classes.Functor.Functor p => UVMHS.Core.Classes.Functor.Functor (Duet.Syntax.TypePre p)
instance (GHC.Classes.Ord e, GHC.Classes.Ord (p e)) => GHC.Classes.Ord (Duet.Syntax.TypePre p e)
instance (GHC.Classes.Eq e, GHC.Classes.Eq (p e)) => GHC.Classes.Eq (Duet.Syntax.TypePre p e)
instance forall k (p :: k -> *) (e :: k). UVMHS.Lib.Pretty.Class.Pretty (Duet.Quantity.Quantity (p e)) => UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.Priv p e)
instance UVMHS.Core.Classes.Functor.Functor p => UVMHS.Core.Classes.Functor.Functor (Duet.Syntax.Priv p)
instance forall k (p :: k -> *) (e :: k). UVMHS.Core.Classes.Monoid.Append (p e) => UVMHS.Core.Classes.Monoid.Monoid (Duet.Syntax.Priv p e)
instance forall k (p :: k -> *) (e :: k). UVMHS.Core.Classes.Monoid.Append (p e) => UVMHS.Core.Classes.Monoid.Append (Duet.Syntax.Priv p e)
instance forall k (p :: k -> *) (e :: k). UVMHS.Core.Classes.Monoid.Null (Duet.Syntax.Priv p e)
instance forall k (p :: k -> *) (e :: k). GHC.Show.Show (p e) => GHC.Show.Show (Duet.Syntax.Priv p e)
instance forall k (p :: k -> *) (e :: k). GHC.Classes.Ord (p e) => GHC.Classes.Ord (Duet.Syntax.Priv p e)
instance forall k (p :: k -> *) (e :: k). GHC.Classes.Eq (p e) => GHC.Classes.Eq (Duet.Syntax.Priv p e)
instance UVMHS.Lib.Pretty.Class.Pretty (Duet.Quantity.Quantity e) => UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.Sens e)
instance UVMHS.Core.Classes.Monoid.Append e => UVMHS.Core.Classes.Monoid.Monoid (Duet.Syntax.Sens e)
instance UVMHS.Core.Classes.Monoid.Append e => UVMHS.Core.Classes.Monoid.Append (Duet.Syntax.Sens e)
instance UVMHS.Core.Classes.Monoid.Null (Duet.Syntax.Sens e)
instance UVMHS.Core.Classes.Functor.Functor Duet.Syntax.Sens
instance GHC.Show.Show e => GHC.Show.Show (Duet.Syntax.Sens e)
instance GHC.Classes.Ord e => GHC.Classes.Ord (Duet.Syntax.Sens e)
instance GHC.Classes.Eq e => GHC.Classes.Eq (Duet.Syntax.Sens e)
instance UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Norm => UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Clip
instance GHC.Show.Show Duet.Syntax.Clip
instance GHC.Classes.Ord Duet.Syntax.Clip
instance GHC.Classes.Eq Duet.Syntax.Clip
instance UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.Norm
instance GHC.Show.Show Duet.Syntax.Norm
instance GHC.Classes.Ord Duet.Syntax.Norm
instance GHC.Classes.Eq Duet.Syntax.Norm
instance UVMHS.Lib.Pretty.Class.Pretty Duet.Syntax.KindPre
instance GHC.Show.Show Duet.Syntax.KindPre
instance GHC.Classes.Ord Duet.Syntax.KindPre
instance GHC.Classes.Eq Duet.Syntax.KindPre

module Duet.Parser
data Token
TokenName :: 𝕊 -> Token
TokenLiteral :: 𝕊 -> Token
TokenInteger :: ℤ -> Token
TokenDouble :: 𝔻 -> Token
TokenComment :: Token
TokenSpace :: Token
tokenSpaceL :: (⌲) Token ()
tokenCommentL :: (⌲) Token ()
tokenDoubleL :: (⌲) Token 𝔻
tokenIntegerL :: (⌲) Token ℤ
tokenLiteralL :: (⌲) Token 𝕊
tokenNameL :: (⌲) Token 𝕊
tokKeywords :: 𝐿 𝕊
tokPunctuation :: 𝐿 𝕊
tokComment :: Parser ℂ ()
tokMLComment :: Parser ℂ ()
tokDuet :: 𝐿 (Parser ℂ Token)
parLit :: 𝕊 -> Parser Token ()
parName :: Parser Token 𝕊
parInt :: Parser Token ℤ
parNat :: Parser Token ℕ
parDbl :: Parser Token 𝔻
parNNDbl :: Parser Token 𝔻
parKind :: Parser Token Kind
parRExp :: Parser Token RExp
parNorm :: Parser Token Norm
parClip :: Parser Token Clip
parSens :: Parser Token (Sens RExp)
parPriv :: Parser Token (Priv ID RExp)
parSpace :: Parser Token ()
parType :: Parser Token (Type ID RExp)
parGrad :: Parser Token Grad
parSExp :: Parser Token (SExp ID)
parPExp :: Parser Token (PExp ID)
tokSkip :: Token -> 𝔹
instance (UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.𝕊, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.ℤ, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.𝔻) => UVMHS.Lib.Pretty.Class.Pretty Duet.Parser.Token
instance GHC.Show.Show Duet.Parser.Token
instance GHC.Classes.Ord Duet.Parser.Token
instance GHC.Classes.Eq Duet.Parser.Token

module Duet.Check
inferKind :: (𝕏 ⇰ KindPre) -> RExpPre -> 𝑂 KindPre
data TypeError p
TypeError :: Doc -> (𝕏 ⇰ Type p RNF) -> TypePre p RNF -> 𝐿 𝕊 -> TypeError p
[typeErrorTerm] :: TypeError p -> Doc
[typeErrorContext] :: TypeError p -> 𝕏 ⇰ Type p RNF
[typeErrorType] :: TypeError p -> TypePre p RNF
[typeErrorExpected] :: TypeError p -> 𝐿 𝕊
inferSens :: Privacy p => (𝕏 ⇰ Kind) -> (𝕏 ⇰ Type p RNF) -> SExp p -> ErrorT (TypeError p) (WriterT (𝕏 ⇰ Sens RNF) ID) (TypePre p RNF)
instance (UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Pretty.Core.Doc, UVMHS.Lib.Pretty.Class.Pretty (Duet.Var.𝕏 UVMHS.Init.⇰ Duet.Syntax.Type p Duet.RExp.RNF), UVMHS.Lib.Pretty.Class.Pretty (Duet.Syntax.TypePre p Duet.RExp.RNF), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.𝐿 UVMHS.Init.𝕊)) => UVMHS.Lib.Pretty.Class.Pretty (Duet.Check.TypeError p)

module Duet

module Main
main :: IO ()
