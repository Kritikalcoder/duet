let tiny-map = 
  sŒª m : ‚Ñï , n : ‚Ñï . X : ùïÑ [ L1 , U | m , n ‚ãÖ ‚Ñù ] ‚áí
    mmap X { x ‚áí x + 1.0 }
in

-- (1)
-- in the paper
-- X :‚ÇÅ list(‚Ñù) ‚ä¢ map (Œª x ‚áí x + 1.0) X : list(‚Ñù)
-- { X :: list(‚Ñù) | X<1> - X<2> ‚â§ s } ‚ä¢ map (Œª x ‚áí x + 1.0 X) :: { R :: list(‚Ñù) | R<1> - R<2> ‚â§ s } 

let one-sens =
  pŒª Œµ : ‚Ñù‚Å∫ , Œ¥ : ‚Ñù‚Å∫ . Œµ : ‚Ñù‚Å∫[Œµ] , Œ¥ : ‚Ñù‚Å∫[Œ¥] , y : ‚Ñù ‚áí
    (pŒª . x : ‚Ñù ‚áí gauss[‚Ñù‚Å∫[1.0],Œµ,Œ¥] <x> {x})@[.y]
in

-- let two-sens =
--   pŒª Œµ : ‚Ñù‚Å∫ , Œ¥ : ‚Ñù‚Å∫ . Œµ : ‚Ñù‚Å∫[Œµ] , Œ¥ : ‚Ñù‚Å∫[Œ¥] , y : ‚Ñù ‚áí
--     let z = box (y+y) in
--     -- gauss[‚Ñù‚Å∫[2.0],Œµ,Œ¥] <y> {unbox z}
--     return (pŒª . x : box[y@2.0] ‚Ñù ‚áí
--       gauss[‚Ñù‚Å∫[2.0],Œµ,Œ¥] <y> {unbox x}
--     ) -- @[.z] -- (pŒª . x : box[y@2.0] ‚Ñù ‚áí gauss[‚Ñù‚Å∫[2.0],Œµ,Œ¥] <y> {unbox x})@[.z]
-- in

let two-args =
  pŒª Œµ : ‚Ñù‚Å∫ , Œ¥ : ‚Ñù‚Å∫ . Œµ : ‚Ñù‚Å∫[Œµ] , Œ¥ : ‚Ñù‚Å∫[Œ¥] , x : ‚Ñù , y : ‚Ñù ‚áí
    g‚ÇÅ ‚Üê gauss[‚Ñù‚Å∫[1.0],Œµ,Œ¥] <x> {x} ;
    g‚ÇÇ ‚Üê gauss[‚Ñù‚Å∫[1.0],Œµ,Œ¥] <y> {y} ;
    return g‚ÇÅ + g‚ÇÇ
in

two-args

-- (2)
-- in the paper
-- Arthur's
-- y :‚ÇÇ ‚Ñù
-- 
--   (Œª (x :‚ÇÅ ‚Ñù) ‚áí gauss[1.0,Œµ,Œ¥] x) (y + y) : ‚óã‚∏§kŒµ,ke‚∏¢(k-1)Œµ‚∏£Œ¥‚∏• (for k = 2 in this example)
--   (Œª (x :‚ÇÅ ‚Ñù) ‚áí gauss[1.0,Œµ,Œ¥] x) (y + y) : ‚óã‚∏§2Œµ,2e·µãŒ¥‚∏• (for k = 2 in this example)
--
-- Relational work
-- (Œª (x :: {x :: ‚Ñù | x<1> - x<2> | ‚â§ 1.0}) ‚áí gauss[1.0,Œµ,Œ¥] x) (y + y) ‚à∂‚úó
-- (Œª (x :: {x :: ‚Ñù | x<1> - x<2> | ‚â§ s}) ‚áí gauss[s,Œµ,Œ¥] x) (y + y) ‚à∂ M‚∏§Œµ,Œ¥‚∏• (better)
--
-- Our work
--
-- (pŒª (x :‚∏§Œµ,Œ¥‚∏• ‚Ñù) ‚áí gauss[1.0,Œµ,Œ¥] x) (y + y) :‚úó

-- y :‚∏§Œµ,Œ¥‚∏• ‚Ñù
-- ‚ä¢
-- gauss[2.0,Œµ,Œ¥] (y + y) : 
--

-- (3)
-- Arthur
-- (X :‚ÇÅ ‚Ñù) (Y :‚ÇÅ ‚Ñù)
-- 
--   g‚ÇÅ ‚Üê guass[1.0,Œµ,Œ¥] x 
--   g‚ÇÇ ‚Üê gauss[1.0,Œµ,Œ¥] y
--   return (g‚ÇÅ + g‚ÇÇ)
--
-- : ‚óã‚∏§2Œµ,2Œ¥‚∏•

-- Relational
-- (X :: ‚Ñù | distance ‚â§ 1) (Y ‚à∑ ‚Ñù | distance ‚â§ 1)

--   g‚ÇÅ ‚Üê guass[1.0,Œµ,Œ¥] x 
--   g‚ÇÇ ‚Üê gauss[1.0,Œµ,Œ¥] y
--   return (g‚ÇÅ + g‚ÇÇ)
--
-- : M‚∏§2Œµ,2Œ¥‚∏• ‚Ñù

-- us
-- (X :‚∏§Œµ,Œ¥‚∏•) (Y :‚∏§Œµ,Œ¥‚∏•)
--   g‚ÇÅ ‚Üê guass[1.0,Œµ,Œ¥] x 
--   g‚ÇÇ ‚Üê gauss[1.0,Œµ,Œ¥] y
--   return (g‚ÇÅ + g‚ÇÇ)
--
-- : ‚Ñù@‚ü®Œµ,Œ¥‚ü© , ‚Ñù@‚ü®Œµ,Œ¥‚ü© ‚áí ‚Ñù
--
-- (4)
-- let x' = expensive x in
-- gauss [1.0,Œµ,Œ¥] <x> {x'}
--
-- let x' = box (expensive x) in
-- gauss [1.0,Œµ,Œ¥] <x> {unbox x'}
