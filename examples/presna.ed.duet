-- Presna algorithm
let main = pλ ε : ℝ⁺,
              δ : ℝ⁺
              .
              incoming : 𝔻𝔽[interval:ℕ,phone_id:ℕ,x:ℕ,y:ℕ,hash:𝕊],
              outgoing : 𝔻𝔽[interval:ℕ,phone_id:ℕ,x:ℕ,y:ℕ,hash:𝕊],
              blocks   : 𝔻𝔽[x:ℕ, y:ℕ], -- list of all the blocks of interest
              crisis   : 𝔻𝔽[x:ℕ, y:ℕ], -- represents blocks in crisis
              bools    : 𝔻𝔽[crisis:𝔹],
              true     : 𝔹,
              ε : ℝ⁺[ε],
              δ : ℝ⁺[δ]
              ⇒
  -- NORMAL mode
  q₁ ← mgauss[ℝ⁺[1.0], ε, δ] <outgoing> 
         { mmap (partitionDF[blocks, outgoing]) 
                { x ⇒ real (countDF x) } } ;

  -- CRISIS mode
  incomingM ← return partitionDF[bools, (mapDF incoming { x ⇒ addColDF ⧼crisis⧽ true })];
  outgoingM ← return partitionDF[bools, (mapDF outgoing { x ⇒ addColDF ⧼crisis⧽ true })];

  -- q₁ ← mgauss[ℝ⁺[1.0], ε, δ] <outgoing> { mmap countDF (partitionDF blocks outgoingₙ⧼x,y⧽) } ;
  -- q₂ ← mgauss[ℝ⁺[1.0], ε, δ] <incoming> { mmap countDF (partitionDF blocks incomingₙ⧼x,y⧽) } ;
  -- q₃ ← mgauss[ℝ⁺[1.0], ε, δ] <outgoing> 
  --        { mmap countDF ( joinDF₁⧼hash⧽ (partitionDF blocks incomingₙ⧼x,y⧽)) } ;
  return q₁
in main
