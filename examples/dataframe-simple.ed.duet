-- simple dataframe example
let main = pλ ε   : ℝ⁺,
              δ   : ℝ⁺
              .
              ε   : ℝ⁺[ε],
              δ   : ℝ⁺[δ],
              df₁ : 𝔻𝔽[id:ℕ, salary:ℝ], 
              df₂ : bag record[id:ℕ, salary:ℝ],
              b   : bag ℕ,
              s   : set ℕ
              ⇒
  aaaa ← gauss[ℝ⁺[2.0], ε, δ] <df₁> { ℝ⁺[2.0]⋅ real (countBag (filterBag df₁ {x ⇒ x⧼id⧽ ≡ 1})) };
  bbbb ← gauss[ℝ⁺[2.0], ε, δ] <df₂> { ℝ⁺[2.0]⋅ real (countBag (filterBag df₂ {x ⇒ x⧼id⧽ ≡ 1})) };
  cccc ← gauss[ℝ⁺[1.0], ε, δ] <b> { real (countBag b) };
  dddd ← bgauss[ℝ⁺[1.0], ε, δ] <b> { bmap partitionDF[df₂, id, s] { r ⇒ real (countBag r) } };
  return aaaa
in main

-- TODOS:
-- bgauss (like mgauss; will need parser & syntax & typechecker)
-- bmap   (like mmap; will need parser & syntax & typechecker)
-- partitionDF (just fix typechecker)

-- Typing rule for partition
-- Γ₁ ⊢ e₁ : bag record[a₁: τ₁ ... aₙ : τₙ]
-- Γ₂ ⊢ e₂ : set τᵢ
-- --------------------------
-- Γ₁ + ∞Γ₂ ⊢ partition[e₁, aᵢ, e₂] : 𝕄[ℕ, ℕ[1]] bag record[a₁: τ₁ ... aₙ : τₙ]


-- example w/ matrix: mgauss { mmap m { r ⇒ countBag r } }

-- rows[istrue, b]:
-- (
-- true, 2
-- true, 3
-- false, 2
-- )

-- set:
-- {true, false}

-- partition rows⧼istrue⧽ set =
-- (
-- (
-- true, 2
-- true, 3
-- )
-- (
-- false,2
-- )
-- )
