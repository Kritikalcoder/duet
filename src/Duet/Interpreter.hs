module Duet.Interpreter where

import Duet.UVMHS

import Duet.Pretty ()
import Duet.Syntax
import Duet.RNF
import Duet.Quantity

-- libraries
-- import Text.CSV
-- import Text.Parsec.Error
-- import System.Environment
-- import Debug.Trace
-- import Numeric.Natural
-- import Control.Exception
-- import Data.Random.Normal

type Env = Map Var Val

-- | Returns maximum element
maxElem ::  Ord b => [(a, b)] -> a
maxElem = fst . maximumBy (comparing snd)

-- | Returns minimum element
minElem ::  Ord b => [(a, b)] -> a
minElem = fst . minimumBy (comparing snd)

-- | Defining Val algebraic data type
data Val =
  NatV Natural
  | RealV Double
  | PairV Val Val
  | SFunV Var SExp Env
  | PFunV [Var] PExp Env
  | MatrixV (Matrix Double)
  deriving (Eq, Show)

-- | Converts and integer to a double
intDouble ‚à∑ Int ‚Üí Double
intDouble = fromIntegral

-- | Converts a natural number to a double
mkDouble ‚à∑ Natural ‚Üí Double
mkDouble = fromIntegral

-- | Evaluates an expression from the sensitivity language
seval ‚à∑ Env ‚Üí SExp ‚Üí Val

-- literals
seval _ (SNatE n)        = NatV n
seval _ (SRealE n)       = RealV n
seval _ (SSingRealE n)   = RealV n
seval _ (SSingNatE n)    = NatV n
seval env (SRealNatE e) =
  case (seval env e) of
    (NatV n) -> RealV $ mkDouble n

-- variables
seval env (SVarE x) | Map.member x env  = env Map.! x
                    | otherwise         = error $ "Unknown variable: " ++ (chars x) ++ " in environment with bound vars " ++ (chars $ sho $ keys env)

-- arithmetic
seval env (SPlusE e‚ÇÅ e‚ÇÇ) =
  case (seval env e‚ÇÅ, seval env e‚ÇÇ) of
    (MatrixV v‚ÇÅ, MatrixV v‚ÇÇ) ‚Üí MatrixV (v‚ÇÅ + v‚ÇÇ)
    (RealV v‚ÇÅ, RealV v‚ÇÇ) ‚Üí RealV (v‚ÇÅ + v‚ÇÇ)
    (a, b) ‚Üí error $ "No pattern for " ++ (show (a, b))

seval env (SMinusE e‚ÇÅ e‚ÇÇ) =
  case (seval env e‚ÇÅ, seval env e‚ÇÇ) of
    (MatrixV v‚ÇÅ, MatrixV v‚ÇÇ) ‚Üí MatrixV (v‚ÇÅ - v‚ÇÇ)
    (RealV v‚ÇÅ, RealV v‚ÇÇ) ‚Üí RealV (v‚ÇÅ - v‚ÇÇ)
    (a, b) ‚Üí error $ "No pattern for " ++ (show (a, b))

seval env (SMultE e‚ÇÅ e‚ÇÇ) =
  case (seval env e‚ÇÅ, seval env e‚ÇÇ) of
    (MatrixV v‚ÇÅ, MatrixV v‚ÇÇ) ‚Üí MatrixV (v‚ÇÅ <> v‚ÇÇ)
    (RealV v‚ÇÅ, MatrixV v‚ÇÇ) ‚Üí MatrixV (scale v‚ÇÅ v‚ÇÇ)
    (RealV v‚ÇÅ, RealV v‚ÇÇ) ‚Üí RealV (v‚ÇÅ * v‚ÇÇ)
    (a, b) ‚Üí error $ "No pattern for " ++ (show (a, b))

seval env (SDivE e‚ÇÅ e‚ÇÇ) =
  case (seval env e‚ÇÅ, seval env e‚ÇÇ) of
    (RealV v‚ÇÅ, RealV v‚ÇÇ) ‚Üí RealV (v‚ÇÅ / v‚ÇÇ)
    (a, b) ‚Üí error $ "No pattern for " ++ (show (a, b))

-- matrix operations
seval env (SMRowsE e) =
  case (seval env e) of (MatrixV v) ‚Üí
                         NatV $ nat $ rows v

seval env (SMColsE e) =
  case (seval env e) of (MatrixV v) ‚Üí
                         NatV $ nat $ cols v

seval env (SMIdE e) =
  case seval env e of
    (NatV d) ‚Üí
      let posMat ‚à∑ Matrix Double = ident $ int d
          negMat ‚à∑ Matrix Double = scale (-1.0) posMat
      in MatrixV (posMat === negMat)

seval env (SMTrE e) =
  case seval env e of (MatrixV m) ‚Üí MatrixV $ tr m

-- clip operation for only L2 norm
seval env (SClipE norm e) =
  case (norm, seval env e) of
    (L2,   MatrixV v) ‚Üí  MatrixV $ fromRows (map normalize $ toRows v)
    (LInf, MatrixV v) ‚Üí  MatrixV $ fromRows (map normalize $ toRows v)
    (l, _) ‚Üí error $ "Invalid norm for clip: " ++ (show l)

-- gradient
seval env (SGradE LR _ e‚ÇÅ e‚ÇÇ e3) =
  case (seval env e‚ÇÅ, seval env e‚ÇÇ, seval env e3) of
    (MatrixV Œ∏, MatrixV xs, MatrixV ys) ‚Üí
      if (rows Œ∏ == 1 && rows ys == 1)
      then
        let Œ∏'  ‚à∑ Vector Double = flatten Œ∏
            ys' ‚à∑ Vector Double = flatten ys
        in MatrixV $ asRow $ ngrad Œ∏' xs ys'
      else
        error $ "Incorrect matrix dimensions for gradient: " ++ (show (rows Œ∏, rows ys))
    (a, b, c) ‚Üí error $ "No pattern for " ++ (show (a, b, c))

-- create matrix
seval env (SMCreateE l e‚ÇÅ e‚ÇÇ i j e‚ÇÉ) =
  case (seval env e‚ÇÅ, seval env e‚ÇÇ) of
    (NatV v‚ÇÅ, NatV v‚ÇÇ) ‚Üí
      MatrixV $ (><) (int v‚ÇÅ) (int v‚ÇÇ) $ replicate (int $ v‚ÇÅ * v‚ÇÇ) 0.0

-- functions and application
seval env (SPFunE _ args body) =
  PFunV (map fst args) body env

seval env (SSFunE x _ body) =
  SFunV x body env

seval env (SAppE e‚ÇÅ e‚ÇÇ) =
  case seval env e‚ÇÅ of
    (SFunV x body env') ‚Üí
      let env'' = (Map.insert x (seval env e‚ÇÇ) env')
      in seval env'' body

-- error
seval env e = error $ "Unknown expression: " ++ (show e)

-- | Evaluates an expression from the privacy language
peval ‚à∑ Env ‚Üí PExp ‚Üí IO Val

-- bind and application
peval env (PBindE x e‚ÇÅ e‚ÇÇ) = do
  v‚ÇÅ ‚Üê peval env e‚ÇÅ
  v‚ÇÇ ‚Üê peval (Map.insert x v‚ÇÅ env) e‚ÇÇ
  return v‚ÇÇ

peval env (PAppE _ f vars) =
  case seval env f of
    (PFunV args body env') ‚Üí
      let vs    ‚à∑ [Val] = map ((Map.!) env) vars
          env'' ‚à∑ Env   = foldr (\(var, val) ‚Üí Map.insert var val) env' (zip args vs)
      in peval env'' body

-- sample on two matrices and compute on sample
peval env (PSampleE size xs ys x y e) =
  case (seval env size, env Map.! xs, env Map.! ys) of
    (NatV n, MatrixV v1, MatrixV v2) ->
      sampleHelper n v1 v2 x y e env

-- gaussian mechanism for real numbers
peval env (PGaussE r Œµ Œ¥ vs e) =
  case (seval env r, seval env Œµ, seval env  Œ¥, seval env e) of
    (RealV r', RealV Œµ', RealV Œ¥', RealV v) ‚Üí do
      r ‚Üê gaussianNoise 0 (r' * (sqrt $ 2 * (log $ 1.25/Œ¥')) / Œµ')
      return $ RealV $ v + r
    (a, b, c, d) ‚Üí error $ "No pattern for: " ++ (show (a,b,c,d))

-- gaussian mechanism for matrices
peval env (PMGaussE r Œµ Œ¥ vs e) =
  case (seval env r, seval env Œµ, seval env  Œ¥, seval env e) of
    (RealV r', RealV Œµ', RealV Œ¥', MatrixV mat) ‚Üí do
      let œÉ = (r' * (sqrt $ 2 * (log $ 1.25/Œ¥')) / Œµ')
      mat' ‚Üê mapM (\row ‚Üí mapM (\val ‚Üí gaussianNoise val œÉ) row) $ toLists mat
      return $ MatrixV $ fromLists mat'
    (a, b, c, d) ‚Üí error $ "No pattern for: " ++ (show (a,b,c,d))

-- evaluate finite iteration
peval env (PLoopE Œ¥' k init xs x‚ÇÅ x‚ÇÇ e) =
  case (seval env k, seval env init) of
    (NatV k', initV) ‚Üí
      iter k' initV x‚ÇÅ x‚ÇÇ 0 e env

-- evaluate sensitivity expression and return in the context of the privacy language
peval env (PReturnE e) =
  return $ seval env e

-- exponential mechanism
peval env (PExpE s Œµ xs x body) =
  case (seval env s, seval env Œµ, seval env xs) of
    (RealV s', RealV Œµ', MatrixV xs') ‚Üí
      let xs''     = map (\row' ‚Üí fromLists [row']) $ toLists xs'
          envs     = map (\m ‚Üí Map.insert x (MatrixV m) env) xs''
          getScore = \env1 ‚Üí case seval env1 body of
            (RealV   r) ‚Üí r
            (MatrixV m) | size m == (1, 1) ‚Üí head $ head $ toLists m
            a ‚Üí error $ "Invalid score: " ++ (chars $ sho a)
          scores   = map getScore envs
          Œ¥'       = 1e-5
          œÉ        = (s' * (sqrt $ 2 * (log $ 1.25/Œ¥')) / Œµ')
      in do
        scores' ‚Üê mapM (\score ‚Üí gaussianNoise score œÉ) scores
        --putStrLn $ "picked: " ++ (show $ maxElem (zip xs'' scores))
        return $ MatrixV $ minElem (zip xs'' scores')

-- error
peval env e = error $ "Unknown expression: " ++ (show e)


-- | Helper function for loop expressions
iter ‚à∑ Natural ‚Üí Val ‚Üí Var ‚Üí Var ‚Üí Int ‚Üí PExp ‚Üí Env ‚Üí IO Val
iter 0 v _ _ _ _ _ = return v
iter k v t x kp body env = do
  newVal ‚Üê peval (Map.insert x v $ Map.insert t (NatV $ nat kp) env) body
  iter (k - 1) newVal t x (kp+1) body env

-- | Empty environment
emptyEnv ‚à∑ Env
emptyEnv = Map.empty

-- | Read in a dataset and return xs (features) and ys (labels)
readDataSet ‚à∑ String ‚Üí IO (Matrix Double, Vector Double)
readDataSet fileName = do
    Right(mat) ‚Üê parseCSVtoMatrix fileName
    let dataCols ‚à∑ [Vector Double] = toColumns mat
        xs ‚à∑ Matrix Double = fromColumns $ tail dataCols
        ys ‚à∑ Vector Double = head dataCols
    return $ (xs, ys)

-- | Place a dataset into the environment
insertDataSet ‚à∑ Env ‚Üí (Var, Var) ‚Üí (Matrix Double, Vector Double) ‚Üí Env
insertDataSet env (x, y) (xs, ys) =
  Map.insert x (MatrixV xs) $ Map.insert y (MatrixV $ asRow ys) env

-- | Samples a normal distribution and returns a single value
gaussianNoise ‚à∑ Double ‚Üí Double ‚Üí IO Double
gaussianNoise c v = normalIO'(c, v)

-- | Helper function for PSampleE
sampleHelper :: Natural -> Matrix Double -> Matrix  Double -> Var -> Var -> PExp -> Env -> IO Val
sampleHelper n xs ys x y e env = do
  batch <- minibatch (int n) xs (flatten ys)
  peval (insertDataSet env (x, y) ((fst batch), (snd batch))) e


-- GRADIENT --


type Model = Vector Double

-- | Converts an Integral number to a double
dbl ‚à∑ (Integral a) ‚áí a ‚Üí Double
dbl = fromIntegral

-- | Calculates LR loss
loss ‚à∑ Model ‚Üí Matrix Double ‚Üí Vector Double ‚Üí Double
loss Œ∏ x y =
  let Œ∏'       ‚à∑ Matrix Double = asColumn Œ∏
      y'       ‚à∑ Matrix Double = asColumn y
      exponent ‚à∑ Matrix Double = -((x <> Œ∏') * y')
  in (sumElements (log (1.0 + (exp exponent)))) / (dbl $ rows x)

-- | Averages LR gradient over the whole matrix of examples
ngrad ‚à∑ Model ‚Üí Matrix Double ‚Üí Vector Double ‚Üí Vector Double
ngrad Œ∏ x y =
  let Œ∏'       ‚à∑ Matrix Double = asColumn Œ∏
      y'       ‚à∑ Matrix Double = asColumn y
      exponent ‚à∑ Matrix Double = (x <> Œ∏') * y'
      scaled   ‚à∑ Matrix Double = y' * (1.0/(1.0+exp(exponent)))
      gradSum  ‚à∑ Matrix Double = (tr x) <> scaled
      avgGrad  ‚à∑ Vector Double = flatten $ scale (1.0/(dbl $ rows x)) gradSum
  in (- avgGrad)

-- | Obtains a vector in the same direction with L2-norm=1
normalize :: Vector Double -> Vector Double
normalize v
  | r > 1     =  scale (1/r) v
  | otherwise =  v
  where
    r = norm_2 v

-- | Convert a string into a double
readStr ‚à∑ ùïä ‚Üí Double
readStr s = case (reads s) of
  [(d, _)] ‚Üí d
  _ ‚Üí 0.0

-- | Reads a CSV into a matrix
parseCSVtoMatrix ‚à∑ FilePath ‚Üí IO (Either ParseError (Matrix Double))
parseCSVtoMatrix file = do
  Right(csv) ‚Üê parseCSVFromFile file
  let csvList ‚à∑ [[Double]] = map (map readStr) csv
      matrix ‚à∑ Matrix Double = fromLists csvList
  return $ return matrix

-- | Performs gradient descent with a fixed learning rate
gradientDescent ‚à∑ ‚Ñï ‚Üí Model ‚Üí Matrix Double ‚Üí Vector Double ‚Üí Double ‚Üí Model
gradientDescent 0 Œ∏ x y Œ∑ = Œ∏
gradientDescent n Œ∏ x y Œ∑ = let Œ∏' = Œ∏ - (scale Œ∑ $ ngrad Œ∏ x y)
                            in trace ("training iter " ++ (show n) ++
                                      ", loss : " ++ (show $ loss Œ∏ x y))
                               gradientDescent (n-1) Œ∏' x y Œ∑

-- | Makes a single prediction
predict ‚à∑ Model ‚Üí (Vector Double, Double) ‚Üí Double
predict Œ∏ (x, y) = signum $ x <.> Œ∏

isCorrect ‚à∑ (Double, Double) ‚Üí (‚Ñï, ‚Ñï)
isCorrect (prediction, actual) | prediction == actual = (1, 0)
                               | otherwise = (0, 1)

-- | Converts a matrix to a model (flatten it)
toModel ‚à∑ Matrix Double ‚Üí Model
toModel = flatten

-- | Calculates the accuracy of a model
accuracy ‚à∑ Matrix Double ‚Üí Vector Double ‚Üí Model ‚Üí (‚Ñï, ‚Ñï)
accuracy x y Œ∏ = let pairs ‚à∑ [(Vector Double, Double)] = zip (map normalize $ toRows x) (toList y)
                     labels ‚à∑ [Double] = map (predict Œ∏) pairs
                     correct ‚à∑ [(‚Ñï, ‚Ñï)] = map isCorrect $ zip labels (toList y)
                 in foldl' (\a b ‚Üí (fst a + fst b, snd a + snd b)) (0, 0) correct

-- | Ensures that labels are either 1 or -1
fixLabel ‚à∑ Double ‚Üí Double
fixLabel x | x == -1.0 = -1.0
           | x == 1.0 = 1.0
           | otherwise = trace ("Unexpected label: " ++ (show x)) x

-- END GRADIENT --

-- MINIBATCHGRADIENT --

-- | Generates random indicies for sampling
randIndices :: Int -> Int -> Int -> GenIO -> IO [Int]
randIndices n a b gen
  | n == 0    = return []
  | otherwise = do
      x <- uniformR (a, b) gen
      xs' <- randIndices (n - 1) a b gen
      return (x : xs')

-- | Outputs a single minibatch of data
minibatch :: Int -> Matrix Double -> Vector Double -> IO (Matrix Double, Vector Double)
minibatch batchSize xs ys = do
  gen <- createSystemRandom
  idxs <- randIndices batchSize 0 (rows xs - 1) gen
  let bxs = xs ? idxs
      bys = head $ toColumns $ (asColumn ys) ? idxs
  return (bxs, bys)

-- | Generates a list of minibatches
nminibatch :: Int -> Int -> Matrix Double -> Vector Double -> IO [(Matrix Double, Vector Double)]
nminibatch n batchSize x y
  | n == 0    = return []
  | otherwise = do
      x' <- minibatch batchSize x y
      xs <- nminibatch (n - 1) batchSize x y
      return (x' : xs)

-- | Returns an infinite list of random values sampled from a normal distribution
noise :: Int -> Int -> Double -> Double -> Double -> IO [Double]
noise n iters lreg eps delta =
  let stdDev = 4 * lreg * (sqrt (fromIntegral(iters) * (log (1 / delta)))) / (fromIntegral(n) * eps)
  in normalsIO' (0, stdDev)

-- | Generates a list of random numbers sampled from a [0, 1) uniform distribution
randUniform :: Int -> IO[Double]
randUniform n
  | n == 0    = return []
  | otherwise = do
      x <- randomIO
      xs <- randUniform (n - 1)
      return (x : xs)

-- | Initializes model and regularization parameter
initModel :: Int -> Double -> Double -> Maybe Double ->  IO (Vector Double, Double)
initModel m l lambda l2 = do
  rand <- randUniform m
  case (lambda, l2) of
    (0, Nothing) -> return (fromList $ replicate m 0.0, l)
    (lambda, Just l2) | lambda > 0 ->
      return ((scale (2 * l2) (vector (map (subtract 0.5) rand))), l + lambda*l2)
    otherwise -> return (fromList $ replicate m 0.0, 0)

-- | Runs gradient descent on an initial model and a set of minibatches
mbgradientDescent :: Int -> Int  -> Model -> [(Matrix Double, Vector Double)] -> Double ->  [Double] -> Model
mbgradientDescent 0 m theta batches rate noise = theta
mbgradientDescent n m theta batches rate noise =
  let x = (fst (head batches))
      y = (snd (head batches))
      grad = ((ngrad theta x y) + (vector (take m noise)))
      theta' = theta - (scale rate grad)
  in trace ("training iter " ++ (show n) ++
               ", loss : " ++ (show $ loss theta x y) ++
               ", noise :" ++ (show $ take 5 noise))
     mbgradientDescent (n - 1) m theta' (tail batches) rate noise

{- | Runs differentially private, minibatch gradient descent on input matrices
     `x` and `y` and a set of input parameters.
-}
privateMBSGD :: Matrix Double
            -> Vector Double
            -> Double
            -> Double
            -> Int
            -> Double
            -> Double
            -> Int
            -> Double
            -> Maybe Double
            -> IO Model
privateMBSGD x y eps delta iters learningRate l batchSize lambda l2 = do
  init <- initModel (cols x) l lambda l2
  normalNoise <- noise (rows x) iters (snd init) eps delta
  minibatches <- nminibatch iters batchSize x y
  return (mbgradientDescent iters (cols x) (fst init) minibatches learningRate normalNoise)

-- | Runs noiseless minibatch gradient descent.
mbSGD :: Matrix Double
            -> Vector Double
            -> Double
            -> Double
            -> Int
            -> Double
            -> Double
            -> Int
            -> Double
            -> Maybe Double
            -> IO Model
mbSGD x y eps delta iters learningRate l batchSize lambda l2 = do
  init <- initModel (cols x) l lambda l2
  minibatches <- nminibatch iters batchSize x y
  return (mbgradientDescent iters (cols x) (fst init) minibatches learningRate (iterate (+0.0) 0))

-- END MINIBATCHGRADIENT --
