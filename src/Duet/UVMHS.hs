module Duet.UVMHS 
  ( module UVMHS
  , module Duet.UVMHS
  ) where

import UVMHS

import qualified Prelude as HS
import qualified GHC.Stats  as HS
import qualified System.Mem as HS
import qualified Data.Time.Clock as Time

infixl 3 ‚®∫,‚®π

type Time = Time.UTCTime
type TimeD = Time.NominalDiffTime

secondsTimeD ‚à∑ TimeD ‚Üí ùîª
secondsTimeD = HS.realToFrac

instance Zero TimeD where {zero = HS.fromIntegral 0}
instance Plus TimeD where {(+) = (HS.+)}
instance Additive TimeD
instance One TimeD where {one = HS.fromIntegral 1}
instance Times TimeD where {(√ó) = (HS.*)}
instance Multiplicative TimeD

(‚®∫) ‚à∑ Time ‚Üí Time ‚Üí TimeD
(‚®∫) = Time.diffUTCTime

(‚®π) ‚à∑ Time ‚Üí TimeD ‚Üí Time
(‚®π) = flip Time.addUTCTime

now ‚à∑ IO Time
now = Time.getCurrentTime

gc ‚à∑ IO ()
gc = HS.performGC

time ‚à∑ (a ‚Üí b) ‚Üí a ‚Üí IO (b ‚àß TimeD)
time f x = do
  gc
  t‚ÇÅ ‚Üê now
  let y = f x
  t‚ÇÇ ‚Üê now
  return $ (y :* t‚ÇÇ ‚®∫ t‚ÇÅ)

timeIO ‚à∑ IO a ‚Üí IO (a ‚àß TimeD)
timeIO xM = do
  gc
  t‚ÇÅ ‚Üê now
  x ‚Üê xM
  t‚ÇÇ ‚Üê now
  return $ (x :* t‚ÇÇ ‚®∫ t‚ÇÅ)

profile ‚à∑ (a ‚Üí b) ‚Üí a ‚Üí IO (TimeD,ùîª)
profile f x = do
  gc
  s‚ÇÅ ‚Üê HS.getRTSStats
  let (n‚ÇÅ,u‚ÇÅ) = (HS.major_gcs s‚ÇÅ,HS.cumulative_live_bytes s‚ÇÅ)
  t‚ÇÅ ‚Üê now
  let _ = f x
  t‚ÇÇ ‚Üê now
  s‚ÇÇ ‚Üê HS.getRTSStats
  let (n‚ÇÇ,u‚ÇÇ) = (HS.major_gcs s‚ÇÇ,HS.cumulative_live_bytes s‚ÇÇ)
  return (t‚ÇÇ ‚®∫ t‚ÇÅ,dbl (HS.fromIntegral u‚ÇÇ - HS.fromIntegral u‚ÇÅ ‚à∑ ‚Ñï) / dbl (HS.fromIntegral n‚ÇÇ - HS.fromIntegral n‚ÇÅ ‚à∑ ‚Ñï))
